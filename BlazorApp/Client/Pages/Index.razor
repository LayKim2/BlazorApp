@page "/"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@using System.Security.Claims

<AuthorizeView>
    <NotAuthorized>
        <span>Test</span>
    </NotAuthorized>
</AuthorizeView>





@code {
    bool authorized = false;

    protected override async Task OnInitializedAsync()
    {
        var User = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

            if (User != null)
            {
                var NameIdentifier = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

                if (NameIdentifier != null)
                {
                    authorized = true;
                }
                else
                {
                    authorized = false;
                }
            }

            if (authorized)
            {
                JSRuntime.InvokeVoidAsync("Expand");
                NavigationManager.NavigateTo("admin");
            }
            else
            {
                JSRuntime.InvokeVoidAsync("Collapse");
                NavigationManager.NavigateTo("login");
            }

    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    if (!string.IsNullOrEmpty(Url))
    //    {

    //    }
    //}
}


