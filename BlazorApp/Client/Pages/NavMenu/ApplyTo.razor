@page "/admin/applyto"
@using Radzen
@using Radzen.Blazor
@attribute [Authorize]
@inject HttpClient Http
@using BlazorApp.Client.Components.ApplyTo
@inject Radzen.DialogService DialogService

<h3>Apply to</h3>
<MudBlazor.MudGrid>
    <MudBlazor.MudItem xs="11"></MudBlazor.MudItem>
    <MudBlazor.MudItem xs="1">
        <MudBlazor.MudButton Variant="MudBlazor.Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="AddApply">Add</MudBlazor.MudButton>
    </MudBlazor.MudItem>
    <MudBlazor.MudItem xs="12"></MudBlazor.MudItem>
</MudBlazor.MudGrid>


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid @ref="grid" Data="@forecasts2" TItem="WeatherForecast" AllowPaging="true" PageSize="10" AllowSorting="true" AllowFiltering="true" AllowColumnResize="true">
        <Columns>
            <RadzenDataGridColumn TItem="WeatherForecast" Width="60px" Sortable="false" Filterable="false">
                <HeaderTemplate>
                    <RadzenCheckBox TriState="false" TValue="bool" Value="@(forecasts2.Any(i => selectedForecastes != null && selectedForecastes.Contains(i)))"
                                Change="@(args => selectedForecastes = args ? forecasts2.ToList() : null)" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TriState="false" Value="@(selectedForecastes != null && selectedForecastes.Contains(data))"
                                TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { grid.SelectRow(data); }}) />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="WeatherForecast" Property="Date" Title="Date">
                <Template Context="forecast">
                    @forecast.Date.ToShortDateString()
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureC" Title="Temp. (C)" />
            <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureF" Title="Temp. (F)" />
            <RadzenDataGridColumn TItem="WeatherForecast" Property="Summary" Title="Summary" />
        </Columns>
    </RadzenDataGrid>


    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true"
                FilterMode="FilterMode.Simple" PageSize="5" AllowPaging="true" AllowSorting="true" Data="@applies" TItem="Apply" ColumnWidth="300px"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Apply" Property="ID" Filterable="false" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
            @*<RadzenDataGridColumn TItem="Employee" Title="Photo" Sortable="false" Filterable="false" Width="200px" >
        <Template Context="data">
        <RadzenImage Path="@data.Photo" class="rz-gravatar" />
        </Template>
        </RadzenDataGridColumn>*@
            <RadzenDataGridColumn TItem="Apply" Property="Title" Title="Title" />
            <RadzenDataGridColumn TItem="Apply" Property="Date" Title="Date" FormatString="{0:d}" />
            <RadzenDataGridColumn TItem="Apply" Property="Result" Title="Result" />
            <RadzenDataGridColumn TItem="Apply" Property="Notes" Title="Notes" />
        </Columns>
    </RadzenDataGrid>
}




@code {
    bool allowRowSelectOnRowClick = false;
    IEnumerable<Apply> applies;
    IEnumerable<WeatherForecast> forecasts2;
    IList<WeatherForecast> selectedForecastes;

    private WeatherForecast[]? forecasts;
    RadzenDataGrid<WeatherForecast>? grid;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        forecasts2 = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    async Task AddApply(){

        Appointment data = await DialogService.OpenAsync<AddApplyPage>("Add Appointment",
            new Dictionary<string, object> { });

    }
}


<RadzenDialog />
<RadzenNotification />
<RadzenContextMenu />
<RadzenTooltip />