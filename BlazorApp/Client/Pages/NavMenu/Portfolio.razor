@page "/portfolio"
@using BlazorApp.Client.Components.Portfolio
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IPortfolioService PortfolioService
@inject IAuthService AuthService
@implements IDisposable
@attribute [Authorize]

@*<SideBar IsEdit="@PortfolioService.IsEdit" />*@

@*//sidebar*@
<header id="header">
    <div class="d-flex flex-column">
        <div class="profile">
            <img src="/images/sample/profile-img.jpg" alt="" class="img-fluid rounded-circle">

            @if (PortfolioService.IsEdit)
            {
                <EditForm Model="edtingPortfolio" OnValidSubmit="SavePortfolio">
                         <InputText @bind-Value="edtingPortfolio.SideName" class="form-control">Test</InputText>
                </EditForm>
                @*<input type="text" class="editText" maxlength="10" value="Chung Seul" />*@
            }
            else
            {
                <h1 class="text-light"><a>@edtingPortfolio.SideName</a></h1>
            }
            <div class="social-links mt-3 text-center">
                <a class="twitter"><i class="bx bxl-twitter"></i></a>
                <a class="facebook"><i class="bx bxl-facebook"></i></a>
                <a class="instagram"><i class="bx bxl-instagram"></i></a>
                <a class="google-plus"><i class="bx bxl-skype"></i></a>
                <a href="#" class="linkedin"><i class="bx bxl-linkedin"></i></a>
            </div>
        </div>

        <nav id="navbar" class="nav-menu navbar">
            <ul>
                <li>
                    <a id="navhome" href="" @onclick="@(e => ScrollIntoView("home"))" class="nav-link scrollto active" @onclick:preventDefault><i class='bx bxs-home'></i> <span>Home</span></a>
                </li>
                <li>
                    <a id="navabout" href="" @onclick="@(e => ScrollIntoView("about"))" class="nav-link scrollto" @onclick:preventDefault><i class="bx bx-user"></i> <span>About</span></a>
                </li>
                <li>
                    <a id="navconcept1" href="" @onclick="@(e => ScrollIntoView("concept1"))" class="nav-link scrollto" @onclick:preventDefault>
                        <i class="bx bxs-layer"></i>
                        @if (PortfolioService.IsEdit)
                        {
                            <input type="text" class="editText2" maxlength="6" value="Concept1" />
                        }
                        else
                        {
                            <span>Concept1</span>
                        }
                    </a>
                </li>
                <li>
                    <a id="navconcept2" href="" @onclick="@(e => ScrollIntoView("concept2"))" class="nav-link scrollto" @onclick:preventDefault>
                        <i class="bx bxs-layer"></i>
                        @if (PortfolioService.IsEdit)
                        {
                            <input type="text" class="editText2" maxlength="6" value="Concept2" />
                        }
                        else
                        {
                            <span>Concept2</span>
                        }
                    </a>
                </li>
            </ul>
        </nav>
        <!-- .nav-menu -->
    </div>
</header>
@*//sidebar*@

<main id="main">
    <div class="row">
        <div class="section-title col-lg-10 col-md-6">
        </div>

        <div class="col-lg-2 col-md-6 d-md-flex">
            <div>
                <button class="btn btn-success" @onclick="(() => EditPortfolio())">Edit</button>
                <button class="btn btn-primary" @onclick="(() => SavePortfolio())">Save</button>
                <button class="btn btn-danger" @onclick="btnBack">Back</button>
            </div>
        </div>
    </div>
    <Home />
    <About />
    <Concept1 />
    <Concept2 />
</main>

@code {
    BlazorApp.Shared.Portfolio edtingPortfolio = new BlazorApp.Shared.Portfolio();
    //bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        edtingPortfolio = await PortfolioService.GetPortfolio();
        PortfolioService.OnChange += StateHasChanged;
        //isAuthenticated = await AuthService.IsUserAuthenticated();
    }

    public void Dispose()
    {
        PortfolioService.OnChange -= StateHasChanged;
    }

    private void btnBack()
    {
        JSRuntime.InvokeVoidAsync("Expand");
        NavigationManager.NavigateTo("/");
    }

    private async Task SavePortfolio()
    {
        PortfolioService.IsEdit = false;
        edtingPortfolio = await PortfolioService.AddOrUpdatePortfolio(edtingPortfolio);
    }

    private void EditPortfolio() {

        PortfolioService.IsEdit = true;

        //edtingPortfolio = 
    }

    private void ScrollIntoView(string target)
    {
        JSRuntime.InvokeVoidAsync("ScrollIntoView", target);
    }
}